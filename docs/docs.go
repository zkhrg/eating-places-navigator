// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/get_token/": {
            "get": {
                "description": "Generete JWT token by provided username",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "token"
                ],
                "summary": "Generete token by provided username",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username whos requesting a token",
                        "name": "username",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/places/": {
            "get": {
                "description": "Get a page of places with pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "places"
                ],
                "summary": "Get a page of places",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/api.Page"
                            }
                        }
                    }
                }
            }
        },
        "/api/recommend/": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Get a 3 nearest eating places by lat and lon params using arc formula",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recommendations"
                ],
                "summary": "Get a 3 nearest eating places by lat and lon params",
                "parameters": [
                    {
                        "type": "number",
                        "description": "latitude",
                        "name": "lat",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "longitude",
                        "name": "lon",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/places.Place"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.Page": {
            "type": "object",
            "properties": {
                "last_page": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "next_page": {
                    "type": "integer"
                },
                "places": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/places.Place"
                    }
                },
                "prev_page": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "places.Place": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "object",
                    "properties": {
                        "lat": {
                            "type": "number"
                        },
                        "lon": {
                            "type": "number"
                        }
                    }
                },
                "name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "description": "Bearer token authentication. Type ` + "`" + `Bearer \u003ctoken\u003e` + "`" + ` to auth.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
